'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''
import time
import math

# 좀 더 빠른 약수 구하기.. 이렇게도 되는구나!
'''
i = 2
n = 28
while i <= math.sqrt(n):
    if n%i == 0:
        print("divisor",i)
        if(i != (n/i)):
            print("divisor2",n/i)
    i += 1
'''


print("start time",time.time())

# 약수 구하기
def getDivisorCnt(devidend):
    divisorCnt = 0
    i = 2
    while i <= math.sqrt(devidend):
        #print(i)
        if(devidend%i == 0):
            #print("divisor",i)
            divisorCnt += 1
            if(i != (devidend/i)):
                divisorCnt += 1
        i += 1
    #print("total divisor Cnt",divisorCnt+2)
    return divisorCnt+2 # 1과 수 자신도 약수이므로 2를 더해줌


init = 1
add = 2
while True:
    init += add
    #print(init)
    if getDivisorCnt(init) > 500:
        break
    add += 1

print(init)
print("end time",time.time())

'''
start time 1526007145.801045
76576500
end time 1526007161.913045
'''